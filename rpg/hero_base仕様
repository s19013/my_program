hero_base：
__init__変数
名前
職業
最大hpとhp
最大mpとmp
-----------------
最大攻撃力と攻撃力
攻撃力レベル
攻撃力ターン
攻撃倍率
------------------
防御中か否か
防御力レベル
防御力ターン
防御倍率
------------------
クリティカルレベル
クリティカルターン
クリティカル倍率
------------------
毒レベル
毒ターン
麻痺レベル
麻痺ターン
出血レベル
出血ターン
出血による下がる攻撃力を保存する変数
--------------------------------
生きているかどうか
すでに死んでいるか
休みターン
------------------------
デバック用
-------------------------
show()
  名前や体力とかを表示する関数
  状態異常のレベルに応じて表示
    boxに追加
  すべて0だったら「なしと表示」

--------------------------
check()
  各ステータスの関数を呼び出す関数
  防御を戻す
  defe = False
  呼び出す関数
  poison()
  bleeding()
  defe_turn()
-------------------------

#mp_hpの管理
use_mp(used)
  mpを減らす関数
  自分のmp ← 自分のmp-used
  自分のmp > 0
    return True
  他
    return False

recovery_hp(care_hp)
  hpを回復する関数
  生きている & 最大hp < 自分のhp
    自分のhp　←　自分のhp + care_hp
    出力:「（自分の名前）は（care_hp）回復した」
    自分のhp > 自分の最大hp
      自分のhp ←　自分の最大hp
      ＃溢れた分を切り捨てる
  生きている & 最大hp => 自分のhp
    出力:「これ以上回復できない」
  死んでる
    出力「死んでるから回復できない」

recovery_mp(care_mp)
  mpを回復する関数
  生きている & 最大 < 自分の
    自分の　←　自分の + care_mp
    出力:「（自分の名前）は（care_mp）回復した」
    自分のmp > 自分の最大mp
      自分のmp ←　自分の最大mp
      ＃溢れた分を切り捨てる
  生きている & 最大 => 自分の
    出力:「これ以上回復できない」
  死んでる
    出力「死んでるから回復できない」
---------------------------
#ダメージ系
receive_damage(damage,type)
  hpを減らす関数
  生きている
    type = "n"
      防御中
        damage ← damage　- (1.2 * 防御倍率)
        自分のhp ←　自分のダメージ　-　damage
        ＃少数四捨五入
        防御　= False
        #スイッチを切る
      他
        自分のhp ←　自分のダメージ　-　damage
        出力:「（自分の名前）は（damage）のダメージを受けた」
    type = "p"
      自分のhp ←　自分のダメージ　-　damage
      出力:「（自分の名前）は毒で（damage）のダメージを受けた」
    type = "b"
      自分のhp ←　自分のダメージ　-　damage
      出力:「（自分の名前）は出血で（damage）のダメージを受けた」
  自分のhp <= 0 & すでに死んでいる　= False
    出力:「（自分のの名前）は死んでしまった」
    すでに死んでいる　= True
    生きている　= False
--------------------------
#防御
defence(defe_turn)
  防御力ターンとレートを管理する関数
  防御ターン　←　防御ターン　+ defence_turn
  効果ターンによってレベルが上がる
  レベルが上がると防御倍率が上がる
  turn:Lv:rate
  0:0:1
  5:1:1.2
  10:2:1.6
  15:3:2
---------------------------------------
##状態異常系
#毒
receive_poison_turn(poison_turn)　
  毒ターンを管理する関数
  自分のターン数　←　自分のターン + poison_turn
  効果ターンによってレベルが上がる
  死ぬとリセットされる
  turn:Lv
  15:3
  10:2
  5:1
  0:0

poison()
  毒を受ける関数
  レベルが上がるほど受けるダメージが増える
  #四捨五入
  lv:ダメージ
  3:(自分のhp　* 0.3)+5
  2:(自分のhp　* 0.2)+5
  1:(自分のhp　* 0.1)+5
  ターン数　←　ターン数　- 1
  ターン数 <= 0
  ターン数 ←　0

#出血
receive_bleeding_turn(bleeding_turn)
  出血ターンを管理する関数
  自分のターン　←　自分のターン　+　bleeding_turn
  効果ターンによってレベルが上がる
  死ぬとリセットされる
  turn:Lv
  15:3
  10:2
  5:1
  0:0
  ターン数　←　ターン数　- 1
  ターン数 <= 0
  ターン数 ←　0

bleeding()
  出血によるダメージを受ける関数
  レベルが上がるほど受けるダメージが増える、攻撃力が下がる
  下がった攻撃力を変数abdに足して保存する
  bleeding_turn = 0　のとき　attack_baseに足して元に戻す
  #四捨五入
  攻撃力は最低1
  Lv:ダメージ:下がる攻撃力
  3:(自分のhp　* 0.4)+10:(自分の攻撃力　*0.15)
  2:(自分のhp　* 0.3)+10:(自分の攻撃力　*0.1)
  1:(自分のhp　* 0.2)+10:(自分の攻撃力　*0.05)
---------------------------------------------
#攻撃
attack(damage)
  ダメージを計算する関数
  critical()を呼び出しクリティカルかどうかを決める
  a ← damage * cri_rate * power_rate
  #四捨五入
  出力: ({自分の名前}の攻撃)

critical_turn(turn)
  クリティカルターンを管理する関数
  レベルが上がるほどクリティカルの可能性が上がる
  死ぬとリセットされる
  turn:Lv
  20:4
  15:3
  10:2
  5:1
  0:0

critical()
  cri_rateを決める関数
  変数criにランダムで1〜100の数字を代入
  Lv:cri
  4:~1
  3:~20
  2:~40
  1:~60
  0:

攻撃力上げるに関する関数
状態異常に関する関数
生死に関する関数

攻撃関数
攻撃を受ける関数
mp関数
アイテム
各キャラ

状態異常にもレベルを追加
毒
「5ターンの間1ターンごとに % のダメージ、解毒剤で回復」
最大3段階

麻痺
「確率で動けない、回復剤で回復」

出血
「5ターンの間1ターンごとに % のダメージ、攻撃力低下（レートは動かさない）、止血剤で回復」
最大3段階


クリティカル：
turnが上がれば上がるほどクリティカルが出やすくなる
一定ターンが経過するごとにlevelが1ずつ下がる
相手の攻撃によって下がることもある
死ぬとリセットされる
最大4段階
turnが一定以上になるとレベルが上がる
レベル0以下にはならない

攻撃アップ:
turnが上がれば上がるほどパワーアップ
一定ターンが経過するごとにlevelが1ずつ下がる
相手の攻撃によって下がることもある
死ぬとリセットされる
最大4段階
turnが一定以上になるとレベルが上がる

防御力:
turnが上がれば上がるほど防御力アップ
一定ターンが経過するごとにlevelが1ずつ下がる
相手の攻撃によって下がることもある
死ぬとリセットされる
最大4段階
turnが一定以上になるとレベルが上がる

防御:
self.def = True　の時発動
元のダメージ　ー（1.2*防御力）＝受けるダメージ
sefl.def = Falseに戻す



特技


状態異常も回復receiveを使う

次やること
防御力、防御、攻撃力の関数を作る

enemy_baseを作る
mainを作って動作確認をする
